import flet as ft
import os
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from utilities import  create_button, create_section, create_info_section, create_scrollable_section
from gemini_api import summarize_audio
from notes_db import create_note

def create_note_page(page, switch_page):
    # Navigation bar
    nav_bar = ft.Container(
        content=ft.Row([
            ft.IconButton(
                icon=ft.icons.ARROW_BACK,
                on_click=lambda _: switch_page("home"),
                icon_color="#007AFF"
            ),
            ft.Text("Create New Note", style=ft.TextStyle(size=20, weight=ft.FontWeight.BOLD)),
        ], alignment=ft.MainAxisAlignment.START),
        padding=10,
        bgcolor="#F2F2F7"
    )

    title_input = ft.TextField(
        label="Title",
        border_radius=10,
        filled=True,
        bgcolor="#F2F2F7",
        text_style=ft.TextStyle(color="#000000"),
        border_color="#007AFF",
    )

    file_path = [""]
    file_name = [""]

    content = ft.ListView(spacing=20, padding=20, auto_scroll=True)
    buttons = ft.Column(spacing=20, alignment=ft.MainAxisAlignment.CENTER)
    
    Result = [{
        "text": "Sample text",
        "summary": "Sample summary",
        "note": "Sample note",
        "source": "Sample source",
        "execute_time": "Sample execute time",
    }]

    def select_audio_file(e):
        Tk().withdraw()
        file_path[0] = askopenfilename(filetypes=[("Audio Files", "*.mp3")])
        
        if file_path[0]:
            file_name[0] = os.path.basename(file_path[0])
            update_content(f"Selected File: {file_name[0]}")
            update_buttons(file_selected=True)

    def generate_Note(e):
        update_content("Loading, please wait...")
        update_buttons(generating=True)

        result = summarize_audio(file_path[0], file_name[0])
        Result[0] = result

        update_content_with_results(result)
        update_buttons(generated=True)

    def on_save(e):
        title = title_input.value or f"Note from {file_name[0]}"
        create_note(title, file_name[0], Result[0])
        switch_page("home")

    def update_content(message=None):
        content.controls.clear()
        if message:
            content.controls.append(ft.Text(message))
        page.update()

    def update_content_with_results(result):
        content.controls.clear()
        content.controls.extend([
            create_info_section("File Information", [
                f"File: {file_name[0]}",
                f"Execute time: {result['execute_time']}"
            ]),
            create_section("Generated by", result['source'], page),
            create_section("Note", result['note'], page, copy=True),
            create_section("Summary", result['summary'], page, copy=True),
            create_scrollable_section("Transcript", result['text'], page, copy=True),
        ])
        page.update()

    def update_buttons(file_selected=False, generating=False, generated=False):
        buttons.controls.clear()
        if file_selected:
            buttons.controls.extend([
                create_button("Reselect file", select_audio_file),
                create_button("Generate Note", generate_Note),
            ])
        elif generating:
            buttons.controls.append(ft.ProgressRing())
        elif generated:
            buttons.controls.append(create_button("Save", on_save))
        else:
            buttons.controls.append(create_button("Select file", select_audio_file))
        buttons.controls.append(create_button("Back", lambda _: switch_page("home")))
        page.update()

    # Initial button setup
    buttons.controls.append(create_button("Select file", select_audio_file))
    buttons.controls.append(create_button("Back", lambda _: switch_page("home")))

    # Construct the main layout
    main_layout = ft.Column([
        nav_bar,
        ft.Container(padding=20, content=title_input),
        content,
        ft.Container(padding=20, content=buttons),
    ])

    return main_layout